// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/telemetry/ardk_telemetry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Niantic.ARDK.AR.Protobuf {

  /// <summary>Holder for reflection information generated from common/telemetry/ardk_telemetry.proto</summary>
  public static partial class ArdkTelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for common/telemetry/ardk_telemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArdkTelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVjb21tb24vdGVsZW1ldHJ5L2FyZGtfdGVsZW1ldHJ5LnByb3RvEg1uYXIu",
            "dGVsZW1ldHJ5Gh9jb21tb24vYXJfY29tbW9uX21ldGFkYXRhLnByb3RvIvgF",
            "ChZBUkRLVGVsZW1ldHJ5T21uaVByb3RvEkIKFGluaXRpYWxpemF0aW9uX2V2",
            "ZW50GAEgASgLMiIubmFyLnRlbGVtZXRyeS5Jbml0aWFsaXphdGlvbkV2ZW50",
            "SAASOQoQYXJfc2Vzc2lvbl9ldmVudBgCIAEoCzIdLm5hci50ZWxlbWV0cnku",
            "QVJTZXNzaW9uRXZlbnRIABJHChdsaWdodHNoaXBfc2VydmljZV9ldmVudBgD",
            "IAEoCzIkLm5hci50ZWxlbWV0cnkuTGlnaHRzaGlwU2VydmljZUV2ZW50SAAS",
            "UQocbXVsdGlwbGF5ZXJfY29ubmVjdGlvbl9ldmVudBgEIAEoCzIpLm5hci50",
            "ZWxlbWV0cnkuTXVsdGlwbGF5ZXJDb25uZWN0aW9uRXZlbnRIABJbCiFlbmFi",
            "bGVfY29udGV4dHVhbF9hd2FyZW5lc3NfZXZlbnQYBSABKAsyLi5uYXIudGVs",
            "ZW1ldHJ5LkVuYWJsZWRDb250ZXh0dWFsQXdhcmVuZXNzRXZlbnRIABJZCiBt",
            "dWx0aXBsYXllcl9jb2xvY2FsaXphdGlvbl9ldmVudBgGIAEoCzItLm5hci50",
            "ZWxlbWV0cnkuTXVsdGlwbGF5ZXJDb2xvY2FsaXphdGlvbkV2ZW50SAASdgov",
            "bXVsdGlwbGF5ZXJfY29sb2NhbGl6YXRpb25faW5pdGlhbGl6YXRpb25fZXZl",
            "bnQYByABKAsyOy5uYXIudGVsZW1ldHJ5Lk11bHRpcGxheWVyQ29sb2NhbGl6",
            "YXRpb25Jbml0aWFsaXphdGlvbkV2ZW50SAASOQoPY29tbW9uX21ldGFkYXRh",
            "GOgHIAEoCzIfLm5hci50ZWxlbWV0cnkuQVJDb21tb25NZXRhZGF0YRIWCg1k",
            "ZXZlbG9wZXJfa2V5GOkHIAEoCRIVCgx0aW1lc3RhbXBfbXMY6gcgASgDEhYK",
            "DWFyX3Nlc3Npb25faWQY6wcgASgJQhEKD3RlbGVtZXRyeV9ldmVudCJxChNJ",
            "bml0aWFsaXphdGlvbkV2ZW50EhQKDGluc3RhbGxfbW9kZRgBIAEoCRIVCg1s",
            "b2NhbGVfcmVnaW9uGAIgASgJEhYKDmFyY29yZV92ZXJzaW9uGAMgASgJEhUK",
            "DWFya2l0X3ZlcnNpb24YBCABKAkiqAEKDkFSU2Vzc2lvbkV2ZW50EjoKDXNl",
            "c3Npb25fc3RhdGUYASABKA4yIy5uYXIudGVsZW1ldHJ5LkFSU2Vzc2lvbkV2",
            "ZW50LlN0YXRlEhUKDWJhdHRlcnlfbGV2ZWwYAiABKAIiQwoFU3RhdGUSCwoH",
            "VU5LTk9XThAAEgsKB0NSRUFURUQQARIHCgNSVU4QAhIJCgVQQVVTRRADEgwK",
            "CERJU1BPU0VEEAQifAoVTGlnaHRzaGlwU2VydmljZUV2ZW50EhcKD2FwaV9t",
            "ZXRob2RfbmFtZRgBIAEoCRISCgppc19yZXF1ZXN0GAIgASgIEhAKCHJlc3Bv",
            "bnNlGAMgASgJEg8KB3N1Y2Nlc3MYBCABKAgSEwoLaHR0cF9zdGF0dXMYBSAB",
            "KAkigAEKGk11bHRpcGxheWVyQ29ubmVjdGlvbkV2ZW50Eh0KFWFyYmVfaXNz",
            "dWVkX2NsaWVudF9pZBgBIAEoCRIVCg1tcF9zZXNzaW9uX2lkGAIgASgJEhUK",
            "DWNvbm5lY3Rfc3RhdGUYAyABKAkSFQoNYXJiZV9yZXNwb25zZRgEIAEoAyJL",
            "CixNdWx0aXBsYXllckNvbG9jYWxpemF0aW9uSW5pdGlhbGl6YXRpb25FdmVu",
            "dBIbChNjb2xvY2FsaXphdGlvbl90eXBlGAEgASgJIqICCh5NdWx0aXBsYXll",
            "ckNvbG9jYWxpemF0aW9uRXZlbnQSHQoVYXJiZV9pc3N1ZWRfY2xpZW50X2lk",
            "GAEgASgJEhUKDW1wX3Nlc3Npb25faWQYAiABKAkSEwoLY2xpZW50X3R5cGUY",
            "AyABKAkSHAoUY29sb2NhbGl6YXRpb25fc3RhdGUYBCABKAkSNgosYWRfaG9j",
            "X3RpbWVfd2FpdGluZ19mb3JfbG9jYWxpemF0aW9uX2RhdGFfbXMYBSABKARI",
            "ABIkChphZF9ob2NfdGltZV90b19sb2NhbGl6ZV9tcxgGIAEoBEgAEiEKF2Fk",
            "X2hvY19tYXBfdXBsb2FkX2V2ZW50GAcgASgJSABCFgoUY29sb2NhbGl6YXRp",
            "b25fZXZlbnQiZAofRW5hYmxlZENvbnRleHR1YWxBd2FyZW5lc3NFdmVudBIP",
            "CgdtZXNoaW5nGAEgASgIEg4KBmZ1c2lvbhgCIAEoCBINCgVkZXB0aBgDIAEo",
            "CBIRCglzZW1hbnRpY3MYBCABKAhCVgohY29tLm5pYW50aWNwcm9qZWN0LmFy",
            "ZGsudGVsZW1ldHJ5WhZuaWFudGljL2FyZGsvdGVsZW1ldHJ5qgIYTmlhbnRp",
            "Yy5BUkRLLkFSLlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Niantic.ARDK.AR.Protobuf.ArCommonMetadataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.ARDKTelemetryOmniProto), global::Niantic.ARDK.AR.Protobuf.ARDKTelemetryOmniProto.Parser, new[]{ "InitializationEvent", "ArSessionEvent", "LightshipServiceEvent", "MultiplayerConnectionEvent", "EnableContextualAwarenessEvent", "MultiplayerColocalizationEvent", "MultiplayerColocalizationInitializationEvent", "CommonMetadata", "DeveloperKey", "TimestampMs", "ArSessionId" }, new[]{ "TelemetryEvent" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.InitializationEvent), global::Niantic.ARDK.AR.Protobuf.InitializationEvent.Parser, new[]{ "InstallMode", "LocaleRegion", "ArcoreVersion", "ArkitVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.ARSessionEvent), global::Niantic.ARDK.AR.Protobuf.ARSessionEvent.Parser, new[]{ "SessionState", "BatteryLevel" }, null, new[]{ typeof(global::Niantic.ARDK.AR.Protobuf.ARSessionEvent.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.LightshipServiceEvent), global::Niantic.ARDK.AR.Protobuf.LightshipServiceEvent.Parser, new[]{ "ApiMethodName", "IsRequest", "Response", "Success", "HttpStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.MultiplayerConnectionEvent), global::Niantic.ARDK.AR.Protobuf.MultiplayerConnectionEvent.Parser, new[]{ "ArbeIssuedClientId", "MpSessionId", "ConnectState", "ArbeResponse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationInitializationEvent), global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationInitializationEvent.Parser, new[]{ "ColocalizationType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationEvent), global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationEvent.Parser, new[]{ "ArbeIssuedClientId", "MpSessionId", "ClientType", "ColocalizationState", "AdHocTimeWaitingForLocalizationDataMs", "AdHocTimeToLocalizeMs", "AdHocMapUploadEvent" }, new[]{ "ColocalizationEvent" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.ARDK.AR.Protobuf.EnabledContextualAwarenessEvent), global::Niantic.ARDK.AR.Protobuf.EnabledContextualAwarenessEvent.Parser, new[]{ "Meshing", "Fusion", "Depth", "Semantics" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ARDKTelemetryOmniProto : pb::IMessage<ARDKTelemetryOmniProto> {
    private static readonly pb::MessageParser<ARDKTelemetryOmniProto> _parser = new pb::MessageParser<ARDKTelemetryOmniProto>(() => new ARDKTelemetryOmniProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ARDKTelemetryOmniProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARDKTelemetryOmniProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARDKTelemetryOmniProto(ARDKTelemetryOmniProto other) : this() {
      CommonMetadata = other.commonMetadata_ != null ? other.CommonMetadata.Clone() : null;
      developerKey_ = other.developerKey_;
      timestampMs_ = other.timestampMs_;
      arSessionId_ = other.arSessionId_;
      switch (other.TelemetryEventCase) {
        case TelemetryEventOneofCase.InitializationEvent:
          InitializationEvent = other.InitializationEvent.Clone();
          break;
        case TelemetryEventOneofCase.ArSessionEvent:
          ArSessionEvent = other.ArSessionEvent.Clone();
          break;
        case TelemetryEventOneofCase.LightshipServiceEvent:
          LightshipServiceEvent = other.LightshipServiceEvent.Clone();
          break;
        case TelemetryEventOneofCase.MultiplayerConnectionEvent:
          MultiplayerConnectionEvent = other.MultiplayerConnectionEvent.Clone();
          break;
        case TelemetryEventOneofCase.EnableContextualAwarenessEvent:
          EnableContextualAwarenessEvent = other.EnableContextualAwarenessEvent.Clone();
          break;
        case TelemetryEventOneofCase.MultiplayerColocalizationEvent:
          MultiplayerColocalizationEvent = other.MultiplayerColocalizationEvent.Clone();
          break;
        case TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent:
          MultiplayerColocalizationInitializationEvent = other.MultiplayerColocalizationInitializationEvent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARDKTelemetryOmniProto Clone() {
      return new ARDKTelemetryOmniProto(this);
    }

    /// <summary>Field number for the "initialization_event" field.</summary>
    public const int InitializationEventFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.InitializationEvent InitializationEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent ? (global::Niantic.ARDK.AR.Protobuf.InitializationEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.InitializationEvent;
      }
    }

    /// <summary>Field number for the "ar_session_event" field.</summary>
    public const int ArSessionEventFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.ARSessionEvent ArSessionEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ArSessionEvent ? (global::Niantic.ARDK.AR.Protobuf.ARSessionEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ArSessionEvent;
      }
    }

    /// <summary>Field number for the "lightship_service_event" field.</summary>
    public const int LightshipServiceEventFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.LightshipServiceEvent LightshipServiceEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.LightshipServiceEvent ? (global::Niantic.ARDK.AR.Protobuf.LightshipServiceEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.LightshipServiceEvent;
      }
    }

    /// <summary>Field number for the "multiplayer_connection_event" field.</summary>
    public const int MultiplayerConnectionEventFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.MultiplayerConnectionEvent MultiplayerConnectionEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerConnectionEvent ? (global::Niantic.ARDK.AR.Protobuf.MultiplayerConnectionEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.MultiplayerConnectionEvent;
      }
    }

    /// <summary>Field number for the "enable_contextual_awareness_event" field.</summary>
    public const int EnableContextualAwarenessEventFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.EnabledContextualAwarenessEvent EnableContextualAwarenessEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.EnableContextualAwarenessEvent ? (global::Niantic.ARDK.AR.Protobuf.EnabledContextualAwarenessEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.EnableContextualAwarenessEvent;
      }
    }

    /// <summary>Field number for the "multiplayer_colocalization_event" field.</summary>
    public const int MultiplayerColocalizationEventFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationEvent MultiplayerColocalizationEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationEvent ? (global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.MultiplayerColocalizationEvent;
      }
    }

    /// <summary>Field number for the "multiplayer_colocalization_initialization_event" field.</summary>
    public const int MultiplayerColocalizationInitializationEventFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationInitializationEvent MultiplayerColocalizationInitializationEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent ? (global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationInitializationEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent;
      }
    }

    /// <summary>Field number for the "common_metadata" field.</summary>
    public const int CommonMetadataFieldNumber = 1000;
    private global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata commonMetadata_;
    /// <summary>
    ///  Common meta data for all the telemetry protos. The field will be filled in on Unity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata CommonMetadata {
      get { return commonMetadata_; }
      set {
        commonMetadata_ = value;
      }
    }

    /// <summary>Field number for the "developer_key" field.</summary>
    public const int DeveloperKeyFieldNumber = 1001;
    private string developerKey_ = "";
    /// <summary>
    ///  Active developer key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeveloperKey {
      get { return developerKey_; }
      set {
        developerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_ms" field.</summary>
    public const int TimestampMsFieldNumber = 1002;
    private long timestampMs_;
    /// <summary>
    ///  Timestamp contain an epoch time in millis (millis after Jan 1, 1970 UTC).
    ///  This is a field required by https://docs.google.com/document/d/1jUzc0qIR8l8SXdcXVo5KIMYiyXGNlVSC577tlWvwSCI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMs {
      get { return timestampMs_; }
      set {
        timestampMs_ = value;
      }
    }

    /// <summary>Field number for the "ar_session_id" field.</summary>
    public const int ArSessionIdFieldNumber = 1003;
    private string arSessionId_ = "";
    /// <summary>
    ///  ID of the current AR Session. Omitted or set to Guid.Empty when there is no current AR session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArSessionId {
      get { return arSessionId_; }
      set {
        arSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object telemetryEvent_;
    /// <summary>Enum of possible cases for the "telemetry_event" oneof.</summary>
    public enum TelemetryEventOneofCase {
      None = 0,
      InitializationEvent = 1,
      ArSessionEvent = 2,
      LightshipServiceEvent = 3,
      MultiplayerConnectionEvent = 4,
      EnableContextualAwarenessEvent = 5,
      MultiplayerColocalizationEvent = 6,
      MultiplayerColocalizationInitializationEvent = 7,
    }
    private TelemetryEventOneofCase telemetryEventCase_ = TelemetryEventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryEventOneofCase TelemetryEventCase {
      get { return telemetryEventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTelemetryEvent() {
      telemetryEventCase_ = TelemetryEventOneofCase.None;
      telemetryEvent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ARDKTelemetryOmniProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ARDKTelemetryOmniProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitializationEvent, other.InitializationEvent)) return false;
      if (!object.Equals(ArSessionEvent, other.ArSessionEvent)) return false;
      if (!object.Equals(LightshipServiceEvent, other.LightshipServiceEvent)) return false;
      if (!object.Equals(MultiplayerConnectionEvent, other.MultiplayerConnectionEvent)) return false;
      if (!object.Equals(EnableContextualAwarenessEvent, other.EnableContextualAwarenessEvent)) return false;
      if (!object.Equals(MultiplayerColocalizationEvent, other.MultiplayerColocalizationEvent)) return false;
      if (!object.Equals(MultiplayerColocalizationInitializationEvent, other.MultiplayerColocalizationInitializationEvent)) return false;
      if (!object.Equals(CommonMetadata, other.CommonMetadata)) return false;
      if (DeveloperKey != other.DeveloperKey) return false;
      if (TimestampMs != other.TimestampMs) return false;
      if (ArSessionId != other.ArSessionId) return false;
      if (TelemetryEventCase != other.TelemetryEventCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) hash ^= InitializationEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionEvent) hash ^= ArSessionEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.LightshipServiceEvent) hash ^= LightshipServiceEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerConnectionEvent) hash ^= MultiplayerConnectionEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.EnableContextualAwarenessEvent) hash ^= EnableContextualAwarenessEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationEvent) hash ^= MultiplayerColocalizationEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent) hash ^= MultiplayerColocalizationInitializationEvent.GetHashCode();
      if (commonMetadata_ != null) hash ^= CommonMetadata.GetHashCode();
      if (DeveloperKey.Length != 0) hash ^= DeveloperKey.GetHashCode();
      if (TimestampMs != 0L) hash ^= TimestampMs.GetHashCode();
      if (ArSessionId.Length != 0) hash ^= ArSessionId.GetHashCode();
      hash ^= (int) telemetryEventCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) {
        output.WriteRawTag(10);
        output.WriteMessage(InitializationEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionEvent) {
        output.WriteRawTag(18);
        output.WriteMessage(ArSessionEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.LightshipServiceEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(LightshipServiceEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerConnectionEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(MultiplayerConnectionEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.EnableContextualAwarenessEvent) {
        output.WriteRawTag(42);
        output.WriteMessage(EnableContextualAwarenessEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationEvent) {
        output.WriteRawTag(50);
        output.WriteMessage(MultiplayerColocalizationEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent) {
        output.WriteRawTag(58);
        output.WriteMessage(MultiplayerColocalizationInitializationEvent);
      }
      if (commonMetadata_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(CommonMetadata);
      }
      if (DeveloperKey.Length != 0) {
        output.WriteRawTag(202, 62);
        output.WriteString(DeveloperKey);
      }
      if (TimestampMs != 0L) {
        output.WriteRawTag(208, 62);
        output.WriteInt64(TimestampMs);
      }
      if (ArSessionId.Length != 0) {
        output.WriteRawTag(218, 62);
        output.WriteString(ArSessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializationEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArSessionEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.LightshipServiceEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightshipServiceEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerConnectionEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiplayerConnectionEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.EnableContextualAwarenessEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnableContextualAwarenessEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiplayerColocalizationEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiplayerColocalizationInitializationEvent);
      }
      if (commonMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommonMetadata);
      }
      if (DeveloperKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeveloperKey);
      }
      if (TimestampMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TimestampMs);
      }
      if (ArSessionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ArSessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ARDKTelemetryOmniProto other) {
      if (other == null) {
        return;
      }
      if (other.commonMetadata_ != null) {
        if (commonMetadata_ == null) {
          commonMetadata_ = new global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata();
        }
        CommonMetadata.MergeFrom(other.CommonMetadata);
      }
      if (other.DeveloperKey.Length != 0) {
        DeveloperKey = other.DeveloperKey;
      }
      if (other.TimestampMs != 0L) {
        TimestampMs = other.TimestampMs;
      }
      if (other.ArSessionId.Length != 0) {
        ArSessionId = other.ArSessionId;
      }
      switch (other.TelemetryEventCase) {
        case TelemetryEventOneofCase.InitializationEvent:
          InitializationEvent = other.InitializationEvent;
          break;
        case TelemetryEventOneofCase.ArSessionEvent:
          ArSessionEvent = other.ArSessionEvent;
          break;
        case TelemetryEventOneofCase.LightshipServiceEvent:
          LightshipServiceEvent = other.LightshipServiceEvent;
          break;
        case TelemetryEventOneofCase.MultiplayerConnectionEvent:
          MultiplayerConnectionEvent = other.MultiplayerConnectionEvent;
          break;
        case TelemetryEventOneofCase.EnableContextualAwarenessEvent:
          EnableContextualAwarenessEvent = other.EnableContextualAwarenessEvent;
          break;
        case TelemetryEventOneofCase.MultiplayerColocalizationEvent:
          MultiplayerColocalizationEvent = other.MultiplayerColocalizationEvent;
          break;
        case TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent:
          MultiplayerColocalizationInitializationEvent = other.MultiplayerColocalizationInitializationEvent;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Niantic.ARDK.AR.Protobuf.InitializationEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.InitializationEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) {
              subBuilder.MergeFrom(InitializationEvent);
            }
            input.ReadMessage(subBuilder);
            InitializationEvent = subBuilder;
            break;
          }
          case 18: {
            global::Niantic.ARDK.AR.Protobuf.ARSessionEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.ARSessionEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionEvent) {
              subBuilder.MergeFrom(ArSessionEvent);
            }
            input.ReadMessage(subBuilder);
            ArSessionEvent = subBuilder;
            break;
          }
          case 26: {
            global::Niantic.ARDK.AR.Protobuf.LightshipServiceEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.LightshipServiceEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.LightshipServiceEvent) {
              subBuilder.MergeFrom(LightshipServiceEvent);
            }
            input.ReadMessage(subBuilder);
            LightshipServiceEvent = subBuilder;
            break;
          }
          case 34: {
            global::Niantic.ARDK.AR.Protobuf.MultiplayerConnectionEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.MultiplayerConnectionEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerConnectionEvent) {
              subBuilder.MergeFrom(MultiplayerConnectionEvent);
            }
            input.ReadMessage(subBuilder);
            MultiplayerConnectionEvent = subBuilder;
            break;
          }
          case 42: {
            global::Niantic.ARDK.AR.Protobuf.EnabledContextualAwarenessEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.EnabledContextualAwarenessEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.EnableContextualAwarenessEvent) {
              subBuilder.MergeFrom(EnableContextualAwarenessEvent);
            }
            input.ReadMessage(subBuilder);
            EnableContextualAwarenessEvent = subBuilder;
            break;
          }
          case 50: {
            global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationEvent) {
              subBuilder.MergeFrom(MultiplayerColocalizationEvent);
            }
            input.ReadMessage(subBuilder);
            MultiplayerColocalizationEvent = subBuilder;
            break;
          }
          case 58: {
            global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationInitializationEvent subBuilder = new global::Niantic.ARDK.AR.Protobuf.MultiplayerColocalizationInitializationEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.MultiplayerColocalizationInitializationEvent) {
              subBuilder.MergeFrom(MultiplayerColocalizationInitializationEvent);
            }
            input.ReadMessage(subBuilder);
            MultiplayerColocalizationInitializationEvent = subBuilder;
            break;
          }
          case 8002: {
            if (commonMetadata_ == null) {
              commonMetadata_ = new global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata();
            }
            input.ReadMessage(commonMetadata_);
            break;
          }
          case 8010: {
            DeveloperKey = input.ReadString();
            break;
          }
          case 8016: {
            TimestampMs = input.ReadInt64();
            break;
          }
          case 8026: {
            ArSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Protobuf provides a mutable_ function to access the message members while set_ function to other members.
  ///  Note, since we are using macros to implement the telemetry events at ARDK, so that developers do not need
  ///  to deal with constructing proto message. As Protobuf provides a mutable_ function to access the message members
  ///  while set_ function to other members. As limitation, all the telemetry message can't be nested by another message
  ///  for simplicity purpose..
  /// </summary>
  public sealed partial class InitializationEvent : pb::IMessage<InitializationEvent> {
    private static readonly pb::MessageParser<InitializationEvent> _parser = new pb::MessageParser<InitializationEvent>(() => new InitializationEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializationEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializationEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializationEvent(InitializationEvent other) : this() {
      installMode_ = other.installMode_;
      localeRegion_ = other.localeRegion_;
      arcoreVersion_ = other.arcoreVersion_;
      arkitVersion_ = other.arkitVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializationEvent Clone() {
      return new InitializationEvent(this);
    }

    /// <summary>Field number for the "install_mode" field.</summary>
    public const int InstallModeFieldNumber = 1;
    private string installMode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstallMode {
      get { return installMode_; }
      set {
        installMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale_region" field.</summary>
    public const int LocaleRegionFieldNumber = 2;
    private string localeRegion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocaleRegion {
      get { return localeRegion_; }
      set {
        localeRegion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arcore_version" field.</summary>
    public const int ArcoreVersionFieldNumber = 3;
    private string arcoreVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArcoreVersion {
      get { return arcoreVersion_; }
      set {
        arcoreVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arkit_version" field.</summary>
    public const int ArkitVersionFieldNumber = 4;
    private string arkitVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArkitVersion {
      get { return arkitVersion_; }
      set {
        arkitVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializationEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializationEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstallMode != other.InstallMode) return false;
      if (LocaleRegion != other.LocaleRegion) return false;
      if (ArcoreVersion != other.ArcoreVersion) return false;
      if (ArkitVersion != other.ArkitVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstallMode.Length != 0) hash ^= InstallMode.GetHashCode();
      if (LocaleRegion.Length != 0) hash ^= LocaleRegion.GetHashCode();
      if (ArcoreVersion.Length != 0) hash ^= ArcoreVersion.GetHashCode();
      if (ArkitVersion.Length != 0) hash ^= ArkitVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstallMode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstallMode);
      }
      if (LocaleRegion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocaleRegion);
      }
      if (ArcoreVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ArcoreVersion);
      }
      if (ArkitVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ArkitVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstallMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstallMode);
      }
      if (LocaleRegion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocaleRegion);
      }
      if (ArcoreVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArcoreVersion);
      }
      if (ArkitVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArkitVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializationEvent other) {
      if (other == null) {
        return;
      }
      if (other.InstallMode.Length != 0) {
        InstallMode = other.InstallMode;
      }
      if (other.LocaleRegion.Length != 0) {
        LocaleRegion = other.LocaleRegion;
      }
      if (other.ArcoreVersion.Length != 0) {
        ArcoreVersion = other.ArcoreVersion;
      }
      if (other.ArkitVersion.Length != 0) {
        ArkitVersion = other.ArkitVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InstallMode = input.ReadString();
            break;
          }
          case 18: {
            LocaleRegion = input.ReadString();
            break;
          }
          case 26: {
            ArcoreVersion = input.ReadString();
            break;
          }
          case 34: {
            ArkitVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ARSessionEvent : pb::IMessage<ARSessionEvent> {
    private static readonly pb::MessageParser<ARSessionEvent> _parser = new pb::MessageParser<ARSessionEvent>(() => new ARSessionEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ARSessionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARSessionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARSessionEvent(ARSessionEvent other) : this() {
      sessionState_ = other.sessionState_;
      batteryLevel_ = other.batteryLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARSessionEvent Clone() {
      return new ARSessionEvent(this);
    }

    /// <summary>Field number for the "session_state" field.</summary>
    public const int SessionStateFieldNumber = 1;
    private global::Niantic.ARDK.AR.Protobuf.ARSessionEvent.Types.State sessionState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.ARSessionEvent.Types.State SessionState {
      get { return sessionState_; }
      set {
        sessionState_ = value;
      }
    }

    /// <summary>Field number for the "battery_level" field.</summary>
    public const int BatteryLevelFieldNumber = 2;
    private float batteryLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryLevel {
      get { return batteryLevel_; }
      set {
        batteryLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ARSessionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ARSessionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionState != other.SessionState) return false;
      if (BatteryLevel != other.BatteryLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionState != 0) hash ^= SessionState.GetHashCode();
      if (BatteryLevel != 0F) hash ^= BatteryLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionState != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SessionState);
      }
      if (BatteryLevel != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BatteryLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionState);
      }
      if (BatteryLevel != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ARSessionEvent other) {
      if (other == null) {
        return;
      }
      if (other.SessionState != 0) {
        SessionState = other.SessionState;
      }
      if (other.BatteryLevel != 0F) {
        BatteryLevel = other.BatteryLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sessionState_ = (global::Niantic.ARDK.AR.Protobuf.ARSessionEvent.Types.State) input.ReadEnum();
            break;
          }
          case 21: {
            BatteryLevel = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ARSessionEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CREATED")] Created = 1,
        [pbr::OriginalName("RUN")] Run = 2,
        [pbr::OriginalName("PAUSE")] Pause = 3,
        [pbr::OriginalName("DISPOSED")] Disposed = 4,
      }

    }
    #endregion

  }

  public sealed partial class LightshipServiceEvent : pb::IMessage<LightshipServiceEvent> {
    private static readonly pb::MessageParser<LightshipServiceEvent> _parser = new pb::MessageParser<LightshipServiceEvent>(() => new LightshipServiceEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightshipServiceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightshipServiceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightshipServiceEvent(LightshipServiceEvent other) : this() {
      apiMethodName_ = other.apiMethodName_;
      isRequest_ = other.isRequest_;
      response_ = other.response_;
      success_ = other.success_;
      httpStatus_ = other.httpStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightshipServiceEvent Clone() {
      return new LightshipServiceEvent(this);
    }

    /// <summary>Field number for the "api_method_name" field.</summary>
    public const int ApiMethodNameFieldNumber = 1;
    private string apiMethodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiMethodName {
      get { return apiMethodName_; }
      set {
        apiMethodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_request" field.</summary>
    public const int IsRequestFieldNumber = 2;
    private bool isRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRequest {
      get { return isRequest_; }
      set {
        isRequest_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 4;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "http_status" field.</summary>
    public const int HttpStatusFieldNumber = 5;
    private string httpStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpStatus {
      get { return httpStatus_; }
      set {
        httpStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightshipServiceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightshipServiceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApiMethodName != other.ApiMethodName) return false;
      if (IsRequest != other.IsRequest) return false;
      if (Response != other.Response) return false;
      if (Success != other.Success) return false;
      if (HttpStatus != other.HttpStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApiMethodName.Length != 0) hash ^= ApiMethodName.GetHashCode();
      if (IsRequest != false) hash ^= IsRequest.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (HttpStatus.Length != 0) hash ^= HttpStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApiMethodName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ApiMethodName);
      }
      if (IsRequest != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRequest);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Response);
      }
      if (Success != false) {
        output.WriteRawTag(32);
        output.WriteBool(Success);
      }
      if (HttpStatus.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HttpStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApiMethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiMethodName);
      }
      if (IsRequest != false) {
        size += 1 + 1;
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (HttpStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightshipServiceEvent other) {
      if (other == null) {
        return;
      }
      if (other.ApiMethodName.Length != 0) {
        ApiMethodName = other.ApiMethodName;
      }
      if (other.IsRequest != false) {
        IsRequest = other.IsRequest;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.HttpStatus.Length != 0) {
        HttpStatus = other.HttpStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ApiMethodName = input.ReadString();
            break;
          }
          case 16: {
            IsRequest = input.ReadBool();
            break;
          }
          case 26: {
            Response = input.ReadString();
            break;
          }
          case 32: {
            Success = input.ReadBool();
            break;
          }
          case 42: {
            HttpStatus = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplayerConnectionEvent : pb::IMessage<MultiplayerConnectionEvent> {
    private static readonly pb::MessageParser<MultiplayerConnectionEvent> _parser = new pb::MessageParser<MultiplayerConnectionEvent>(() => new MultiplayerConnectionEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplayerConnectionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerConnectionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerConnectionEvent(MultiplayerConnectionEvent other) : this() {
      arbeIssuedClientId_ = other.arbeIssuedClientId_;
      mpSessionId_ = other.mpSessionId_;
      connectState_ = other.connectState_;
      arbeResponse_ = other.arbeResponse_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerConnectionEvent Clone() {
      return new MultiplayerConnectionEvent(this);
    }

    /// <summary>Field number for the "arbe_issued_client_id" field.</summary>
    public const int ArbeIssuedClientIdFieldNumber = 1;
    private string arbeIssuedClientId_ = "";
    /// <summary>
    ///  ARBE-issued ID for this client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArbeIssuedClientId {
      get { return arbeIssuedClientId_; }
      set {
        arbeIssuedClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mp_session_id" field.</summary>
    public const int MpSessionIdFieldNumber = 2;
    private string mpSessionId_ = "";
    /// <summary>
    ///  Multiplayer session ID, uploaded to ARBE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MpSessionId {
      get { return mpSessionId_; }
      set {
        mpSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connect_state" field.</summary>
    public const int ConnectStateFieldNumber = 3;
    private string connectState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectState {
      get { return connectState_; }
      set {
        connectState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arbe_response" field.</summary>
    public const int ArbeResponseFieldNumber = 4;
    private long arbeResponse_;
    /// <summary>
    ///  arbe response code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ArbeResponse {
      get { return arbeResponse_; }
      set {
        arbeResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplayerConnectionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplayerConnectionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArbeIssuedClientId != other.ArbeIssuedClientId) return false;
      if (MpSessionId != other.MpSessionId) return false;
      if (ConnectState != other.ConnectState) return false;
      if (ArbeResponse != other.ArbeResponse) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArbeIssuedClientId.Length != 0) hash ^= ArbeIssuedClientId.GetHashCode();
      if (MpSessionId.Length != 0) hash ^= MpSessionId.GetHashCode();
      if (ConnectState.Length != 0) hash ^= ConnectState.GetHashCode();
      if (ArbeResponse != 0L) hash ^= ArbeResponse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArbeIssuedClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ArbeIssuedClientId);
      }
      if (MpSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MpSessionId);
      }
      if (ConnectState.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConnectState);
      }
      if (ArbeResponse != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ArbeResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArbeIssuedClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArbeIssuedClientId);
      }
      if (MpSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MpSessionId);
      }
      if (ConnectState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectState);
      }
      if (ArbeResponse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ArbeResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplayerConnectionEvent other) {
      if (other == null) {
        return;
      }
      if (other.ArbeIssuedClientId.Length != 0) {
        ArbeIssuedClientId = other.ArbeIssuedClientId;
      }
      if (other.MpSessionId.Length != 0) {
        MpSessionId = other.MpSessionId;
      }
      if (other.ConnectState.Length != 0) {
        ConnectState = other.ConnectState;
      }
      if (other.ArbeResponse != 0L) {
        ArbeResponse = other.ArbeResponse;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ArbeIssuedClientId = input.ReadString();
            break;
          }
          case 18: {
            MpSessionId = input.ReadString();
            break;
          }
          case 26: {
            ConnectState = input.ReadString();
            break;
          }
          case 32: {
            ArbeResponse = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplayerColocalizationInitializationEvent : pb::IMessage<MultiplayerColocalizationInitializationEvent> {
    private static readonly pb::MessageParser<MultiplayerColocalizationInitializationEvent> _parser = new pb::MessageParser<MultiplayerColocalizationInitializationEvent>(() => new MultiplayerColocalizationInitializationEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplayerColocalizationInitializationEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerColocalizationInitializationEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerColocalizationInitializationEvent(MultiplayerColocalizationInitializationEvent other) : this() {
      colocalizationType_ = other.colocalizationType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerColocalizationInitializationEvent Clone() {
      return new MultiplayerColocalizationInitializationEvent(this);
    }

    /// <summary>Field number for the "colocalization_type" field.</summary>
    public const int ColocalizationTypeFieldNumber = 1;
    private string colocalizationType_ = "";
    /// <summary>
    ///  The colocalization algorithm instantiated. Called for each
    ///  colocalization algorithm that is started in a multiplayer session.
    ///  Possible values: SLAM_POINTS_AND_LINES, MARKER_SYNC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColocalizationType {
      get { return colocalizationType_; }
      set {
        colocalizationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplayerColocalizationInitializationEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplayerColocalizationInitializationEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColocalizationType != other.ColocalizationType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColocalizationType.Length != 0) hash ^= ColocalizationType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColocalizationType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColocalizationType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColocalizationType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColocalizationType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplayerColocalizationInitializationEvent other) {
      if (other == null) {
        return;
      }
      if (other.ColocalizationType.Length != 0) {
        ColocalizationType = other.ColocalizationType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ColocalizationType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplayerColocalizationEvent : pb::IMessage<MultiplayerColocalizationEvent> {
    private static readonly pb::MessageParser<MultiplayerColocalizationEvent> _parser = new pb::MessageParser<MultiplayerColocalizationEvent>(() => new MultiplayerColocalizationEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplayerColocalizationEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerColocalizationEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerColocalizationEvent(MultiplayerColocalizationEvent other) : this() {
      arbeIssuedClientId_ = other.arbeIssuedClientId_;
      mpSessionId_ = other.mpSessionId_;
      clientType_ = other.clientType_;
      colocalizationState_ = other.colocalizationState_;
      switch (other.ColocalizationEventCase) {
        case ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs:
          AdHocTimeWaitingForLocalizationDataMs = other.AdHocTimeWaitingForLocalizationDataMs;
          break;
        case ColocalizationEventOneofCase.AdHocTimeToLocalizeMs:
          AdHocTimeToLocalizeMs = other.AdHocTimeToLocalizeMs;
          break;
        case ColocalizationEventOneofCase.AdHocMapUploadEvent:
          AdHocMapUploadEvent = other.AdHocMapUploadEvent;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplayerColocalizationEvent Clone() {
      return new MultiplayerColocalizationEvent(this);
    }

    /// <summary>Field number for the "arbe_issued_client_id" field.</summary>
    public const int ArbeIssuedClientIdFieldNumber = 1;
    private string arbeIssuedClientId_ = "";
    /// <summary>
    ///  ARBE-issued ID for this client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArbeIssuedClientId {
      get { return arbeIssuedClientId_; }
      set {
        arbeIssuedClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mp_session_id" field.</summary>
    public const int MpSessionIdFieldNumber = 2;
    private string mpSessionId_ = "";
    /// <summary>
    ///  Multiplayer session ID, uploaded to ARBE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MpSessionId {
      get { return mpSessionId_; }
      set {
        mpSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 3;
    private string clientType_ = "";
    /// <summary>
    ///  can be HOST or PEER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientType {
      get { return clientType_; }
      set {
        clientType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colocalization_state" field.</summary>
    public const int ColocalizationStateFieldNumber = 4;
    private string colocalizationState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColocalizationState {
      get { return colocalizationState_; }
      set {
        colocalizationState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ad_hoc_time_waiting_for_localization_data_ms" field.</summary>
    public const int AdHocTimeWaitingForLocalizationDataMsFieldNumber = 5;
    /// <summary>
    ///  time from connect to data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AdHocTimeWaitingForLocalizationDataMs {
      get { return colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs ? (ulong) colocalizationEvent_ : 0UL; }
      set {
        colocalizationEvent_ = value;
        colocalizationEventCase_ = ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs;
      }
    }

    /// <summary>Field number for the "ad_hoc_time_to_localize_ms" field.</summary>
    public const int AdHocTimeToLocalizeMsFieldNumber = 6;
    /// <summary>
    ///  time from data available to localization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AdHocTimeToLocalizeMs {
      get { return colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeToLocalizeMs ? (ulong) colocalizationEvent_ : 0UL; }
      set {
        colocalizationEvent_ = value;
        colocalizationEventCase_ = ColocalizationEventOneofCase.AdHocTimeToLocalizeMs;
      }
    }

    /// <summary>Field number for the "ad_hoc_map_upload_event" field.</summary>
    public const int AdHocMapUploadEventFieldNumber = 7;
    /// <summary>
    ///  Type of ad-hoc map uploaded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdHocMapUploadEvent {
      get { return colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocMapUploadEvent ? (string) colocalizationEvent_ : ""; }
      set {
        colocalizationEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        colocalizationEventCase_ = ColocalizationEventOneofCase.AdHocMapUploadEvent;
      }
    }

    private object colocalizationEvent_;
    /// <summary>Enum of possible cases for the "colocalization_event" oneof.</summary>
    public enum ColocalizationEventOneofCase {
      None = 0,
      AdHocTimeWaitingForLocalizationDataMs = 5,
      AdHocTimeToLocalizeMs = 6,
      AdHocMapUploadEvent = 7,
    }
    private ColocalizationEventOneofCase colocalizationEventCase_ = ColocalizationEventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColocalizationEventOneofCase ColocalizationEventCase {
      get { return colocalizationEventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColocalizationEvent() {
      colocalizationEventCase_ = ColocalizationEventOneofCase.None;
      colocalizationEvent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplayerColocalizationEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplayerColocalizationEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArbeIssuedClientId != other.ArbeIssuedClientId) return false;
      if (MpSessionId != other.MpSessionId) return false;
      if (ClientType != other.ClientType) return false;
      if (ColocalizationState != other.ColocalizationState) return false;
      if (AdHocTimeWaitingForLocalizationDataMs != other.AdHocTimeWaitingForLocalizationDataMs) return false;
      if (AdHocTimeToLocalizeMs != other.AdHocTimeToLocalizeMs) return false;
      if (AdHocMapUploadEvent != other.AdHocMapUploadEvent) return false;
      if (ColocalizationEventCase != other.ColocalizationEventCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArbeIssuedClientId.Length != 0) hash ^= ArbeIssuedClientId.GetHashCode();
      if (MpSessionId.Length != 0) hash ^= MpSessionId.GetHashCode();
      if (ClientType.Length != 0) hash ^= ClientType.GetHashCode();
      if (ColocalizationState.Length != 0) hash ^= ColocalizationState.GetHashCode();
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs) hash ^= AdHocTimeWaitingForLocalizationDataMs.GetHashCode();
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeToLocalizeMs) hash ^= AdHocTimeToLocalizeMs.GetHashCode();
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocMapUploadEvent) hash ^= AdHocMapUploadEvent.GetHashCode();
      hash ^= (int) colocalizationEventCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArbeIssuedClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ArbeIssuedClientId);
      }
      if (MpSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MpSessionId);
      }
      if (ClientType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientType);
      }
      if (ColocalizationState.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ColocalizationState);
      }
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs) {
        output.WriteRawTag(40);
        output.WriteUInt64(AdHocTimeWaitingForLocalizationDataMs);
      }
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeToLocalizeMs) {
        output.WriteRawTag(48);
        output.WriteUInt64(AdHocTimeToLocalizeMs);
      }
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocMapUploadEvent) {
        output.WriteRawTag(58);
        output.WriteString(AdHocMapUploadEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArbeIssuedClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArbeIssuedClientId);
      }
      if (MpSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MpSessionId);
      }
      if (ClientType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientType);
      }
      if (ColocalizationState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColocalizationState);
      }
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdHocTimeWaitingForLocalizationDataMs);
      }
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocTimeToLocalizeMs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdHocTimeToLocalizeMs);
      }
      if (colocalizationEventCase_ == ColocalizationEventOneofCase.AdHocMapUploadEvent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdHocMapUploadEvent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplayerColocalizationEvent other) {
      if (other == null) {
        return;
      }
      if (other.ArbeIssuedClientId.Length != 0) {
        ArbeIssuedClientId = other.ArbeIssuedClientId;
      }
      if (other.MpSessionId.Length != 0) {
        MpSessionId = other.MpSessionId;
      }
      if (other.ClientType.Length != 0) {
        ClientType = other.ClientType;
      }
      if (other.ColocalizationState.Length != 0) {
        ColocalizationState = other.ColocalizationState;
      }
      switch (other.ColocalizationEventCase) {
        case ColocalizationEventOneofCase.AdHocTimeWaitingForLocalizationDataMs:
          AdHocTimeWaitingForLocalizationDataMs = other.AdHocTimeWaitingForLocalizationDataMs;
          break;
        case ColocalizationEventOneofCase.AdHocTimeToLocalizeMs:
          AdHocTimeToLocalizeMs = other.AdHocTimeToLocalizeMs;
          break;
        case ColocalizationEventOneofCase.AdHocMapUploadEvent:
          AdHocMapUploadEvent = other.AdHocMapUploadEvent;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ArbeIssuedClientId = input.ReadString();
            break;
          }
          case 18: {
            MpSessionId = input.ReadString();
            break;
          }
          case 26: {
            ClientType = input.ReadString();
            break;
          }
          case 34: {
            ColocalizationState = input.ReadString();
            break;
          }
          case 40: {
            AdHocTimeWaitingForLocalizationDataMs = input.ReadUInt64();
            break;
          }
          case 48: {
            AdHocTimeToLocalizeMs = input.ReadUInt64();
            break;
          }
          case 58: {
            AdHocMapUploadEvent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnabledContextualAwarenessEvent : pb::IMessage<EnabledContextualAwarenessEvent> {
    private static readonly pb::MessageParser<EnabledContextualAwarenessEvent> _parser = new pb::MessageParser<EnabledContextualAwarenessEvent>(() => new EnabledContextualAwarenessEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnabledContextualAwarenessEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.ARDK.AR.Protobuf.ArdkTelemetryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnabledContextualAwarenessEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnabledContextualAwarenessEvent(EnabledContextualAwarenessEvent other) : this() {
      meshing_ = other.meshing_;
      fusion_ = other.fusion_;
      depth_ = other.depth_;
      semantics_ = other.semantics_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnabledContextualAwarenessEvent Clone() {
      return new EnabledContextualAwarenessEvent(this);
    }

    /// <summary>Field number for the "meshing" field.</summary>
    public const int MeshingFieldNumber = 1;
    private bool meshing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Meshing {
      get { return meshing_; }
      set {
        meshing_ = value;
      }
    }

    /// <summary>Field number for the "fusion" field.</summary>
    public const int FusionFieldNumber = 2;
    private bool fusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fusion {
      get { return fusion_; }
      set {
        fusion_ = value;
      }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 3;
    private bool depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Depth {
      get { return depth_; }
      set {
        depth_ = value;
      }
    }

    /// <summary>Field number for the "semantics" field.</summary>
    public const int SemanticsFieldNumber = 4;
    private bool semantics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Semantics {
      get { return semantics_; }
      set {
        semantics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnabledContextualAwarenessEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnabledContextualAwarenessEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Meshing != other.Meshing) return false;
      if (Fusion != other.Fusion) return false;
      if (Depth != other.Depth) return false;
      if (Semantics != other.Semantics) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Meshing != false) hash ^= Meshing.GetHashCode();
      if (Fusion != false) hash ^= Fusion.GetHashCode();
      if (Depth != false) hash ^= Depth.GetHashCode();
      if (Semantics != false) hash ^= Semantics.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Meshing != false) {
        output.WriteRawTag(8);
        output.WriteBool(Meshing);
      }
      if (Fusion != false) {
        output.WriteRawTag(16);
        output.WriteBool(Fusion);
      }
      if (Depth != false) {
        output.WriteRawTag(24);
        output.WriteBool(Depth);
      }
      if (Semantics != false) {
        output.WriteRawTag(32);
        output.WriteBool(Semantics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Meshing != false) {
        size += 1 + 1;
      }
      if (Fusion != false) {
        size += 1 + 1;
      }
      if (Depth != false) {
        size += 1 + 1;
      }
      if (Semantics != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnabledContextualAwarenessEvent other) {
      if (other == null) {
        return;
      }
      if (other.Meshing != false) {
        Meshing = other.Meshing;
      }
      if (other.Fusion != false) {
        Fusion = other.Fusion;
      }
      if (other.Depth != false) {
        Depth = other.Depth;
      }
      if (other.Semantics != false) {
        Semantics = other.Semantics;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Meshing = input.ReadBool();
            break;
          }
          case 16: {
            Fusion = input.ReadBool();
            break;
          }
          case 24: {
            Depth = input.ReadBool();
            break;
          }
          case 32: {
            Semantics = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
